package mvp

import chisel3._
import chisel3.util._

class InstructionMemory() extends Module {
  val io = IO(new Bundle {
    val testSelect = Input(UInt(3.W))
    val rdAddr     = Input(UInt(8.W))
    val rdData     = Output(UInt(32.W))
  })

  val mem = Wire(Vec(100, UInt(32.W)));
  for( i <- 0 to 99){
    mem(i) := 0.U(32.W)
  }
  io.rdData := mem(io.rdAddr)



  mem(0) := "b0000000000001101_0000_0001_001_0_0100".U  // 13 into reg1
  mem(1) := "b0000000000000001_0000_0010_001_0_0100".U  // 1 into reg2
  mem(2) := "b00000000_00000000_00000000_00000000".U
  mem(3) := "b00000000_00000000_00000000_00000000".U
  mem(4) := "b0000_00000000_0001_0000_0000000_1_0001".U // store reg1 val at addr 0
  mem(5) := "b00000000_00000000_00000000_00000000".U
  mem(6) := "b00000000_00000000_00000000_00000000".U
  mem(7) := "b0000_00000000_0000_0000_0011_000_1_0000".U // load addr 0  into reg3
  mem(4) := "b0000_00000000_0001_0000_0000000_1_0001".U // store reg1 val at addr 0
  mem(5) := "b00000000_00000000_00000000_00000000".U
  mem(6) := "b00000000_00000000_00000000_00000000".U
  mem(7) := "b0000_00000000_0000_0000_0011_000_1_0000".U // load addr 0  into reg3
  mem(4) := "b0000_00000000_0001_0000_0000000_1_0001".U // store reg1 val at addr 0
  mem(5) := "b00000000_00000000_00000000_00000000".U
  mem(6) := "b00000000_00000000_00000000_00000000".U
  mem(7) := "b0000_00000000_0000_0000_0011_000_1_0000".U // load addr 0  into reg3


//  switch(io.testSelect){
//    // ----- Test 0 : Single ALU Instruction -----
//    is(0.U(3.W)){
//      mem(0) := "b0000000000001000_0000_0001_001_0_0100".U
//    }
//    // ----- Test 1 : Basic ALU Pipeline Test -----
//    is(1.U(3.W)){
//      mem(0) := "b0000000000000101_0000_0001_001_0_0100".U
//      mem(1) := "b0000000000000011_0000_0010_001_0_0100".U
//      mem(2) := "b0000000000000111_0000_0011_001_0_0100".U
//      mem(3) := "b0000000000000100_0000_0100_001_0_0100".U
//      mem(4) := "b0000000000000000_0001_0100_010_0_0010".U
//      mem(5) := "b000000000000_0010_0001_0011_000_0_0100".U
//      mem(6) := "b0000000000000000_0010_0001_010_0_0011".U
//      mem(7) := "b0000000000000001_0000_0000_001_0_0100".U
//      mem(8) := "b000000000000_0100_0010_0011_000_0_0100".U
//    }
//    // ----- Test 2 : Basic ALU Pipeline Test with Bubble -----
//    is(2.U(3.W)){
//      mem(0) := "b0000000000000101_0000_0001_001_0_0100".U
//      mem(1) := "b0000000000000011_0000_0010_001_0_0100".U
//      mem(2) := "b00000000_00000000_00000000_00000000".U
//      mem(3) := "b00000000_00000000_00000000_00000000".U
//      mem(4) := "b0000000000000000_0001_0100_010_0_0010".U
//      mem(5) := "b000000000000_0010_0001_0011_000_0_0100".U
//      mem(6) := "b0000000000000000_0010_0001_010_0_0011".U
//      mem(7) := "b00000000_00000000_00000000_00000000".U
//      mem(8) := "b000000000000_0010_0100_0011_000_0_0101".U
//    }
//    // ----- Test 3 : Single Memory Store Instruction -----
//    is(3.U(3.W)){
//      mem(0) := "b0000000000001100_0000_0001_001_0_0100".U
//      mem(1) := "b00000000_00000000_00000000_00000000".U
//      mem(2) := "b00000000_00000000_00000000_00000000".U
//      mem(3) := "b00000000_00000000_00000000_00000000".U
//      mem(4) := "b0000_00000011_0001_0000_0000000_1_0001".U
//    }
    // ----- Test 4 : Memory Store Then Memory Load Instruction -----
//    is(4.U(3.W)){
//      mem(0) := "b0000000000001100_0000_0001_001_0_0100".U  // 12 into reg1
//      mem(1) := "b0000000000000001_0000_0010_001_0_0100".U  // 1 into reg2
//      mem(2) := "b00000000_00000000_00000000_00000000".U
//      mem(3) := "b00000000_00000000_00000000_00000000".U
//      mem(4) := "b0000_00000011_0001_0000_0000000_1_0001".U // store reg1 val at addr 3
//      mem(5) := "b00000000_00000000_00000000_00000000".U
//      mem(6) := "b00000000_00000000_00000000_00000000".U
//      mem(7) := "b0000_00000010_0000_0010_0011_000_1_0000".U // load addr 3 (reg2 = 1 + offset 2) into reg3
//    }

    // ----- Test 4 : Memory Store Then Memory Load Instruction -----
//    is(4.U(3.W)){
//      mem(0) := "b0000000000001101_0000_0001_001_0_0100".U  // 13 into reg1
//      mem(1) := "b0000000000000001_0000_0010_001_0_0100".U  // 1 into reg2
//      mem(2) := "b00000000_00000000_00000000_00000000".U
//      mem(3) := "b00000000_00000000_00000000_00000000".U
//      mem(4) := "b0000_00000000_0001_0000_0000000_1_0001".U // store reg1 val at addr 0
//      mem(5) := "b00000000_00000000_00000000_00000000".U
//      mem(6) := "b00000000_00000000_00000000_00000000".U
//      mem(7) := "b0000_00000000_0000_0000_0011_000_1_0000".U // load addr 0  into reg3
//    }
//
//
//    // ----- Test 5 : Basic Program -----
//    is(5.U(3.W)){
//      // TODO
//    }
//  }

}
