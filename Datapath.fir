;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Datapath : 
  gmodule InstructionMemory :
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, rdData : UInt<32>}
    
    smem mem : UInt<32>[256] @[InstructionMemory.scala 13:24]
    infer mport _T_11 = mem[io.rdAddr], clock @[InstructionMemory.scala 15:19]
    io.rdData <= _T_11 @[InstructionMemory.scala 15:13]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, flip wrAddr : UInt<8>, flip wrData : UInt<8>, rdData : UInt<32>, flip rd : UInt<1>, flip wr : UInt<1>}
    
    smem mem : UInt<32>[256] @[DataMemory.scala 17:24]
    io.rdData <= UInt<32>("h00") @[DataMemory.scala 19:13]
    when io.rd : @[DataMemory.scala 21:15]
      infer mport _T_20 = mem[io.rdAddr], clock @[DataMemory.scala 22:21]
      io.rdData <= _T_20 @[DataMemory.scala 22:15]
      skip @[DataMemory.scala 21:15]
    when io.wr : @[DataMemory.scala 25:15]
      infer mport _T_21 = mem[io.wrAddr], clock @[DataMemory.scala 26:8]
      _T_21 <= io.wrData @[DataMemory.scala 26:20]
      skip @[DataMemory.scala 25:15]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, flip opcode : UInt<5>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 19:10]
    node _T_15 = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T_15 : @[Conditional.scala 40:58]
      io.out <= io.a @[ALU.scala 23:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_17 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_17 : @[Conditional.scala 39:67]
        node _T_19 = add(io.a, asSInt(UInt<2>("h01"))) @[ALU.scala 26:22]
        node _T_20 = tail(_T_19, 1) @[ALU.scala 26:22]
        node _T_21 = asSInt(_T_20) @[ALU.scala 26:22]
        io.out <= _T_21 @[ALU.scala 26:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_23 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_23 : @[Conditional.scala 39:67]
          node _T_25 = sub(io.a, asSInt(UInt<2>("h01"))) @[ALU.scala 29:22]
          node _T_26 = tail(_T_25, 1) @[ALU.scala 29:22]
          node _T_27 = asSInt(_T_26) @[ALU.scala 29:22]
          io.out <= _T_27 @[ALU.scala 29:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_29 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_29 : @[Conditional.scala 39:67]
            node _T_30 = add(io.a, io.b) @[ALU.scala 32:22]
            node _T_31 = tail(_T_30, 1) @[ALU.scala 32:22]
            node _T_32 = asSInt(_T_31) @[ALU.scala 32:22]
            io.out <= _T_32 @[ALU.scala 32:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_34 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_34 : @[Conditional.scala 39:67]
              node _T_35 = sub(io.a, io.b) @[ALU.scala 35:22]
              node _T_36 = tail(_T_35, 1) @[ALU.scala 35:22]
              node _T_37 = asSInt(_T_36) @[ALU.scala 35:22]
              io.out <= _T_37 @[ALU.scala 35:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_39 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_39 : @[Conditional.scala 39:67]
                node _T_40 = not(io.a) @[ALU.scala 38:17]
                node _T_41 = asSInt(_T_40) @[ALU.scala 38:17]
                io.out <= _T_41 @[ALU.scala 38:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_43 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_43 : @[Conditional.scala 39:67]
                  node _T_44 = and(io.a, io.b) @[ALU.scala 41:22]
                  node _T_45 = asSInt(_T_44) @[ALU.scala 41:22]
                  io.out <= _T_45 @[ALU.scala 41:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_47 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_47 : @[Conditional.scala 39:67]
                    node _T_48 = or(io.a, io.b) @[ALU.scala 44:22]
                    node _T_49 = asSInt(_T_48) @[ALU.scala 44:22]
                    io.out <= _T_49 @[ALU.scala 44:14]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_51 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_51 : @[Conditional.scala 39:67]
                      node _T_52 = xor(io.a, io.b) @[ALU.scala 47:22]
                      node _T_53 = asSInt(_T_52) @[ALU.scala 47:22]
                      io.out <= _T_53 @[ALU.scala 47:14]
                      skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {led : UInt<1>}
    
    reg instruction : UInt<32>, clock @[Datapath.scala 20:27]
    reg opcode : UInt<4>, clock @[Datapath.scala 23:22]
    reg memSelectReg1 : UInt<1>, clock @[Datapath.scala 24:26]
    reg bSelect : UInt<1>, clock @[Datapath.scala 25:23]
    reg isLoadReg1 : UInt<1>, clock @[Datapath.scala 26:23]
    reg aVal : UInt<32>, clock @[Datapath.scala 27:20]
    reg bVal : UInt<32>, clock @[Datapath.scala 28:21]
    reg immVal : UInt<32>, clock @[Datapath.scala 29:22]
    reg wbrReg1 : UInt<4>, clock @[Datapath.scala 30:20]
    reg result : UInt<32>, clock @[Datapath.scala 33:22]
    reg data : UInt<32>, clock @[Datapath.scala 36:20]
    inst iMem of InstructionMemory @[Datapath.scala 41:20]
    iMem.clock <= clock
    iMem.reset <= reset
    inst dMem of DataMemory @[Datapath.scala 45:20]
    dMem.clock <= clock
    dMem.reset <= reset
    reg rMem : UInt<32>[10], clock @[Datapath.scala 49:17]
    inst alu of ALU @[Datapath.scala 52:19]
    alu.clock <= clock
    alu.reset <= reset
    reg pc : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Datapath.scala 57:19]
    node _T_36 = add(pc, UInt<8>("h04")) @[Datapath.scala 58:12]
    node _T_37 = tail(_T_36, 1) @[Datapath.scala 58:12]
    pc <= _T_37 @[Datapath.scala 58:6]
    iMem.io.rdAddr <= pc @[Datapath.scala 60:18]
    instruction <= iMem.io.rdData @[Datapath.scala 61:18]
    node _T_38 = bits(instruction, 4, 1) @[Datapath.scala 67:27]
    opcode <= _T_38 @[Datapath.scala 67:13]
    node _T_39 = bits(instruction, 0, 0) @[Datapath.scala 68:31]
    memSelectReg1 <= _T_39 @[Datapath.scala 68:17]
    node _T_40 = bits(instruction, 4, 4) @[Datapath.scala 69:29]
    node _T_41 = not(_T_40) @[Datapath.scala 69:17]
    isLoadReg1 <= _T_41 @[Datapath.scala 69:14]
    node _T_42 = bits(instruction, 15, 12) @[Datapath.scala 70:30]
    aVal <= rMem[_T_42] @[Datapath.scala 70:11]
    node _T_45 = eq(memSelectReg1, UInt<1>("h00")) @[Datapath.scala 72:8]
    when _T_45 : @[Datapath.scala 72:24]
      node _T_46 = bits(instruction, 11, 8) @[Datapath.scala 73:27]
      wbrReg1 <= _T_46 @[Datapath.scala 73:13]
      node _T_47 = bits(instruction, 7, 5) @[Datapath.scala 75:23]
      node _T_49 = eq(UInt<1>("h00"), _T_47) @[Conditional.scala 37:30]
      when _T_49 : @[Conditional.scala 40:58]
        node _T_50 = bits(instruction, 19, 16) @[Datapath.scala 78:37]
        bVal <= rMem[_T_50] @[Datapath.scala 78:18]
        immVal <= UInt<32>("h00") @[Datapath.scala 79:19]
        bSelect <= UInt<1>("h01") @[Datapath.scala 80:20]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_55 = eq(UInt<1>("h01"), _T_47) @[Conditional.scala 37:30]
        when _T_55 : @[Conditional.scala 39:67]
          bVal <= UInt<32>("h00") @[Datapath.scala 84:18]
          node _T_58 = bits(instruction, 31, 16) @[Datapath.scala 85:48]
          node _T_59 = cat(UInt<16>("h00"), _T_58) @[Cat.scala 30:58]
          immVal <= _T_59 @[Datapath.scala 85:19]
          bSelect <= UInt<1>("h00") @[Datapath.scala 86:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_62 = eq(UInt<2>("h02"), _T_47) @[Conditional.scala 37:30]
          when _T_62 : @[Conditional.scala 39:67]
            bVal <= UInt<32>("h00") @[Datapath.scala 90:18]
            immVal <= UInt<32>("h00") @[Datapath.scala 91:19]
            bSelect <= UInt<1>("h00") @[Datapath.scala 92:20]
            skip @[Conditional.scala 39:67]
      skip @[Datapath.scala 72:24]
    else : @[Datapath.scala 95:15]
      node _T_67 = bits(instruction, 27, 20) @[Datapath.scala 96:44]
      node _T_68 = cat(UInt<24>("h00"), _T_67) @[Cat.scala 30:58]
      immVal <= _T_68 @[Datapath.scala 96:15]
      bSelect <= UInt<1>("h00") @[Datapath.scala 97:16]
      when isLoadReg1 : @[Datapath.scala 99:22]
        node _T_70 = bits(instruction, 11, 8) @[Datapath.scala 100:29]
        wbrReg1 <= _T_70 @[Datapath.scala 100:15]
        bVal <= UInt<32>("h00") @[Datapath.scala 101:16]
        skip @[Datapath.scala 99:22]
      else : @[Datapath.scala 103:18]
        wbrReg1 <= UInt<4>("h00") @[Datapath.scala 104:15]
        node _T_73 = bits(instruction, 19, 16) @[Datapath.scala 105:35]
        bVal <= rMem[_T_73] @[Datapath.scala 105:16]
        skip @[Datapath.scala 103:18]
      skip @[Datapath.scala 95:15]
    alu.io.opcode <= opcode @[Datapath.scala 116:17]
    node _T_75 = asSInt(aVal) @[Datapath.scala 117:26]
    alu.io.a <= _T_75 @[Datapath.scala 117:12]
    node _T_77 = eq(bSelect, UInt<1>("h01")) @[Datapath.scala 118:16]
    when _T_77 : @[Datapath.scala 118:28]
      node _T_78 = asSInt(bVal) @[Datapath.scala 119:28]
      alu.io.b <= _T_78 @[Datapath.scala 119:14]
      skip @[Datapath.scala 118:28]
    else : @[Datapath.scala 120:5]
      node _T_79 = asSInt(immVal) @[Datapath.scala 121:30]
      alu.io.b <= _T_79 @[Datapath.scala 121:14]
      skip @[Datapath.scala 120:5]
    node _T_80 = asUInt(alu.io.out) @[Datapath.scala 124:33]
    result <= _T_80 @[Datapath.scala 124:13]
    reg memSelect : UInt<1>, clock @[Datapath.scala 126:30]
    memSelect <= memSelectReg1 @[Datapath.scala 126:30]
    reg isLoad : UInt<1>, clock @[Datapath.scala 127:27]
    isLoad <= isLoadReg1 @[Datapath.scala 127:27]
    reg bValReg2 : UInt, clock @[Datapath.scala 128:25]
    bValReg2 <= bVal @[Datapath.scala 128:25]
    reg wbrReg2 : UInt, clock @[Datapath.scala 129:24]
    wbrReg2 <= wbrReg1 @[Datapath.scala 129:24]
    when memSelect : @[Datapath.scala 138:19]
      when isLoad : @[Datapath.scala 139:17]
        dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 140:18]
        dMem.io.rd <= UInt<1>("h01") @[Datapath.scala 141:18]
        dMem.io.rdAddr <= result @[Datapath.scala 142:22]
        dMem.io.wrAddr <= UInt<8>("h00") @[Datapath.scala 143:22]
        dMem.io.wrData <= UInt<32>("h00") @[Datapath.scala 144:22]
        data <= dMem.io.rdData @[Datapath.scala 145:15]
        skip @[Datapath.scala 139:17]
      else : @[Datapath.scala 146:7]
        dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 147:18]
        dMem.io.rd <= UInt<1>("h00") @[Datapath.scala 148:18]
        dMem.io.rdAddr <= UInt<8>("h00") @[Datapath.scala 149:22]
        dMem.io.wrAddr <= result @[Datapath.scala 150:22]
        dMem.io.wrData <= bValReg2 @[Datapath.scala 151:22]
        data <= UInt<32>("h00") @[Datapath.scala 152:15]
        skip @[Datapath.scala 146:7]
      skip @[Datapath.scala 138:19]
    else : @[Datapath.scala 154:5]
      dMem.io.rd <= UInt<1>("h00") @[Datapath.scala 155:16]
      dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 156:16]
      dMem.io.rdAddr <= UInt<8>("h00") @[Datapath.scala 157:20]
      dMem.io.wrAddr <= UInt<8>("h00") @[Datapath.scala 158:20]
      dMem.io.wrData <= UInt<32>("h00") @[Datapath.scala 159:20]
      data <= result @[Datapath.scala 160:13]
      skip @[Datapath.scala 154:5]
    reg destination : UInt, clock @[Datapath.scala 163:24]
    destination <= wbrReg2 @[Datapath.scala 163:24]
    node _T_100 = neq(destination, UInt<4>("h00")) @[Datapath.scala 170:20]
    when _T_100 : @[Datapath.scala 170:33]
      node _T_103 = or(destination, UInt<4>("h00"))
      node _T_104 = bits(_T_103, 3, 0)
      rMem[_T_104] <= data @[Datapath.scala 171:23]
      skip @[Datapath.scala 170:33]
    reg cntReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Datapath.scala 176:23]
    reg blkReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Datapath.scala 177:23]
    node _T_110 = add(cntReg, UInt<1>("h01")) @[Datapath.scala 179:20]
    node _T_111 = tail(_T_110, 1) @[Datapath.scala 179:20]
    cntReg <= _T_111 @[Datapath.scala 179:10]
    node _T_112 = eq(cntReg, UInt<25>("h017d783f")) @[Datapath.scala 180:15]
    when _T_112 : @[Datapath.scala 180:28]
      cntReg <= UInt<1>("h00") @[Datapath.scala 181:12]
      node _T_114 = not(blkReg) @[Datapath.scala 182:15]
      blkReg <= _T_114 @[Datapath.scala 182:12]
      skip @[Datapath.scala 180:28]
    io.led <= blkReg @[Datapath.scala 184:10]
    
