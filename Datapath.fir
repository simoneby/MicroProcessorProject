;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Datapath : 
  module InstructionMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip testSelect : UInt<3>, flip rdAddr : UInt<8>, rdData : UInt<32>}
    
    wire mem : UInt<32>[100] @[InstructionMemory.scala 13:17]
    mem[0] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[1] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[2] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[3] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[4] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[5] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[6] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[7] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[8] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[9] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[10] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[11] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[12] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[13] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[14] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[15] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[16] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[17] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[18] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[19] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[20] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[21] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[22] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[23] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[24] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[25] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[26] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[27] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[28] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[29] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[30] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[31] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[32] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[33] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[34] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[35] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[36] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[37] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[38] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[39] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[40] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[41] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[42] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[43] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[44] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[45] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[46] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[47] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[48] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[49] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[50] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[51] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[52] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[53] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[54] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[55] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[56] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[57] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[58] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[59] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[60] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[61] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[62] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[63] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[64] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[65] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[66] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[67] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[68] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[69] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[70] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[71] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[72] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[73] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[74] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[75] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[76] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[77] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[78] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[79] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[80] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[81] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[82] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[83] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[84] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[85] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[86] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[87] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[88] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[89] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[90] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[91] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[92] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[93] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[94] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[95] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[96] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[97] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[98] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    mem[99] <= UInt<32>("h00") @[InstructionMemory.scala 15:12]
    node _T_217 = bits(io.rdAddr, 6, 0)
    io.rdData <= mem[_T_217] @[InstructionMemory.scala 17:13]
    mem[0] <= UInt<20>("h0d0124") @[InstructionMemory.scala 21:10]
    mem[1] <= UInt<17>("h010224") @[InstructionMemory.scala 22:10]
    mem[2] <= UInt<1>("h00") @[InstructionMemory.scala 23:10]
    mem[3] <= UInt<1>("h00") @[InstructionMemory.scala 24:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 25:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 26:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 27:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 28:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 29:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 30:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 31:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 32:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 33:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 34:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 35:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 36:10]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, flip wrAddr : UInt<8>, flip wrData : UInt<32>, rdData : UInt<32>, flip wr : UInt<1>, led : UInt<1>}
    
    smem mem : UInt<32>[256] @[DataMemory.scala 17:24]
    reg regLed : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[DataMemory.scala 20:23]
    io.led <= regLed @[DataMemory.scala 21:10]
    node _T_22 = eq(io.wrAddr, UInt<1>("h00")) @[DataMemory.scala 23:19]
    node _T_23 = and(_T_22, io.wr) @[DataMemory.scala 23:27]
    when _T_23 : @[DataMemory.scala 23:36]
      regLed <= io.wrData @[DataMemory.scala 24:12]
      skip @[DataMemory.scala 23:36]
    read mport _T_24 = mem[io.rdAddr], clock @[DataMemory.scala 28:24]
    io.rdData <= _T_24 @[DataMemory.scala 28:13]
    when io.wr : @[DataMemory.scala 30:15]
      write mport _T_25 = mem[io.wrAddr], clock
      _T_25 <= io.wrData
      skip @[DataMemory.scala 30:15]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, flip opcode : UInt<5>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[ALU.scala 18:10]
    node _T_15 = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T_15 : @[Conditional.scala 40:58]
      io.out <= UInt<1>("h00") @[ALU.scala 21:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_18 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_18 : @[Conditional.scala 39:67]
        io.out <= io.a @[ALU.scala 22:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_20 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_20 : @[Conditional.scala 39:67]
          node _T_22 = add(io.a, UInt<1>("h01")) @[ALU.scala 23:30]
          node _T_23 = tail(_T_22, 1) @[ALU.scala 23:30]
          io.out <= _T_23 @[ALU.scala 23:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_25 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_25 : @[Conditional.scala 39:67]
            node _T_27 = sub(io.a, UInt<1>("h01")) @[ALU.scala 24:30]
            node _T_28 = asUInt(_T_27) @[ALU.scala 24:30]
            node _T_29 = tail(_T_28, 1) @[ALU.scala 24:30]
            io.out <= _T_29 @[ALU.scala 24:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_31 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_31 : @[Conditional.scala 39:67]
              node _T_32 = add(io.a, io.b) @[ALU.scala 25:30]
              node _T_33 = tail(_T_32, 1) @[ALU.scala 25:30]
              io.out <= _T_33 @[ALU.scala 25:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_35 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_35 : @[Conditional.scala 39:67]
                node _T_36 = sub(io.a, io.b) @[ALU.scala 26:30]
                node _T_37 = asUInt(_T_36) @[ALU.scala 26:30]
                node _T_38 = tail(_T_37, 1) @[ALU.scala 26:30]
                io.out <= _T_38 @[ALU.scala 26:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_40 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_40 : @[Conditional.scala 39:67]
                  node _T_41 = not(io.a) @[ALU.scala 27:25]
                  io.out <= _T_41 @[ALU.scala 27:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_43 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_43 : @[Conditional.scala 39:67]
                    node _T_44 = and(io.a, io.b) @[ALU.scala 28:29]
                    io.out <= _T_44 @[ALU.scala 28:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_46 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_46 : @[Conditional.scala 39:67]
                      node _T_47 = or(io.a, io.b) @[ALU.scala 29:29]
                      io.out <= _T_47 @[ALU.scala 29:21]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_49 = eq(UInt<4>("h09"), io.opcode) @[Conditional.scala 37:30]
                      when _T_49 : @[Conditional.scala 39:67]
                        node _T_50 = xor(io.a, io.b) @[ALU.scala 30:29]
                        io.out <= _T_50 @[ALU.scala 30:21]
                        skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip testSelect : UInt<3>, inst : UInt<32>, opcode : UInt<5>, memSelect : UInt<1>, bSelect : UInt<1>, isLoad : UInt<1>, regA : UInt<4>, regB : UInt<4>, immediate : UInt<16>, result : UInt<32>, destReg : UInt<4>, WBvalue : UInt<32>, reg0 : UInt<32>, reg1 : UInt<32>, reg2 : UInt<32>, reg3 : UInt<32>, reg4 : UInt<32>, memData : UInt<32>, led : UInt<1>}
    
    inst iMem of InstructionMemory @[Datapath.scala 38:20]
    iMem.clock <= clock
    iMem.reset <= reset
    iMem.io.testSelect <= io.testSelect @[Datapath.scala 39:22]
    inst dMem of DataMemory @[Datapath.scala 42:20]
    dMem.clock <= clock
    dMem.reset <= reset
    dMem.io.wrAddr <= UInt<1>("h00") @[Datapath.scala 43:18]
    dMem.io.wrData <= UInt<1>("h00") @[Datapath.scala 44:18]
    dMem.io.rdAddr <= UInt<1>("h00") @[Datapath.scala 45:18]
    dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 46:14]
    io.led <= dMem.io.led @[Datapath.scala 47:10]
    wire _T_60 : UInt<32>[10] @[Datapath.scala 50:30]
    _T_60[0] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[1] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[2] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[3] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[4] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[5] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[6] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[7] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[8] <= UInt<32>("h00") @[Datapath.scala 50:30]
    _T_60[9] <= UInt<32>("h00") @[Datapath.scala 50:30]
    reg rMem : UInt<32>[10], clock with : (reset => (reset, _T_60)) @[Datapath.scala 50:22]
    inst alu of ALU @[Datapath.scala 53:19]
    alu.clock <= clock
    alu.reset <= reset
    reg instruction : UInt<32>, clock @[Datapath.scala 58:27]
    reg opcode : UInt<4>, clock @[Datapath.scala 61:22]
    reg memSelectReg1 : UInt<1>, clock @[Datapath.scala 62:26]
    reg bSelect : UInt<1>, clock @[Datapath.scala 63:23]
    reg isLoadReg1 : UInt<1>, clock @[Datapath.scala 64:23]
    reg aVal : UInt<32>, clock @[Datapath.scala 65:20]
    reg bVal : UInt<32>, clock @[Datapath.scala 66:21]
    reg immVal : UInt<32>, clock @[Datapath.scala 67:22]
    reg wbrReg1 : UInt<4>, clock @[Datapath.scala 68:20]
    reg resultReg : UInt<32>, clock @[Datapath.scala 71:22]
    reg data : UInt<32>, clock @[Datapath.scala 74:20]
    reg pc : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Datapath.scala 79:19]
    node _T_145 = add(pc, UInt<8>("h01")) @[Datapath.scala 80:12]
    node _T_146 = tail(_T_145, 1) @[Datapath.scala 80:12]
    pc <= _T_146 @[Datapath.scala 80:6]
    iMem.io.rdAddr <= pc @[Datapath.scala 82:18]
    instruction <= iMem.io.rdData @[Datapath.scala 83:18]
    node _T_147 = bits(instruction, 4, 4) @[Datapath.scala 89:31]
    memSelectReg1 <= _T_147 @[Datapath.scala 89:17]
    node _T_148 = bits(instruction, 0, 0) @[Datapath.scala 90:29]
    node _T_149 = not(_T_148) @[Datapath.scala 90:17]
    isLoadReg1 <= _T_149 @[Datapath.scala 90:14]
    node _T_150 = bits(instruction, 15, 12) @[Datapath.scala 91:30]
    aVal <= rMem[_T_150] @[Datapath.scala 91:11]
    node _T_154 = bits(instruction, 4, 4) @[Datapath.scala 93:19]
    node _T_156 = eq(_T_154, UInt<1>("h00")) @[Datapath.scala 93:23]
    when _T_156 : @[Datapath.scala 93:37]
      node _T_157 = bits(instruction, 3, 0) @[Datapath.scala 94:29]
      opcode <= _T_157 @[Datapath.scala 94:15]
      node _T_158 = bits(instruction, 11, 8) @[Datapath.scala 95:27]
      wbrReg1 <= _T_158 @[Datapath.scala 95:13]
      node _T_159 = bits(instruction, 7, 5) @[Datapath.scala 97:23]
      node _T_161 = eq(UInt<1>("h00"), _T_159) @[Conditional.scala 37:30]
      when _T_161 : @[Conditional.scala 40:58]
        node _T_162 = bits(instruction, 19, 16) @[Datapath.scala 100:37]
        bVal <= rMem[_T_162] @[Datapath.scala 100:18]
        immVal <= UInt<32>("h00") @[Datapath.scala 101:19]
        bSelect <= UInt<1>("h01") @[Datapath.scala 102:20]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_169 = eq(UInt<1>("h01"), _T_159) @[Conditional.scala 37:30]
        when _T_169 : @[Conditional.scala 39:67]
          bVal <= UInt<32>("h00") @[Datapath.scala 106:18]
          node _T_172 = bits(instruction, 31, 16) @[Datapath.scala 107:48]
          node _T_173 = cat(UInt<16>("h00"), _T_172) @[Cat.scala 30:58]
          immVal <= _T_173 @[Datapath.scala 107:19]
          bSelect <= UInt<1>("h00") @[Datapath.scala 108:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_176 = eq(UInt<2>("h02"), _T_159) @[Conditional.scala 37:30]
          when _T_176 : @[Conditional.scala 39:67]
            bVal <= UInt<32>("h00") @[Datapath.scala 112:18]
            immVal <= UInt<32>("h00") @[Datapath.scala 113:19]
            bSelect <= UInt<1>("h00") @[Datapath.scala 114:20]
            skip @[Conditional.scala 39:67]
      skip @[Datapath.scala 93:37]
    else : @[Datapath.scala 117:15]
      opcode <= UInt<4>("h04") @[Datapath.scala 118:15]
      node _T_182 = bits(instruction, 27, 20) @[Datapath.scala 119:44]
      node _T_183 = cat(UInt<24>("h00"), _T_182) @[Cat.scala 30:58]
      immVal <= _T_183 @[Datapath.scala 119:15]
      bSelect <= UInt<1>("h00") @[Datapath.scala 120:16]
      node _T_185 = bits(instruction, 0, 0) @[Datapath.scala 122:21]
      node _T_187 = eq(_T_185, UInt<1>("h00")) @[Datapath.scala 122:25]
      when _T_187 : @[Datapath.scala 122:39]
        node _T_188 = bits(instruction, 11, 8) @[Datapath.scala 123:29]
        wbrReg1 <= _T_188 @[Datapath.scala 123:15]
        bVal <= UInt<32>("h00") @[Datapath.scala 124:16]
        skip @[Datapath.scala 122:39]
      else : @[Datapath.scala 126:17]
        wbrReg1 <= UInt<4>("h00") @[Datapath.scala 127:15]
        node _T_191 = bits(instruction, 19, 16) @[Datapath.scala 128:35]
        bVal <= rMem[_T_191] @[Datapath.scala 128:16]
        skip @[Datapath.scala 126:17]
      skip @[Datapath.scala 117:15]
    alu.io.opcode <= opcode @[Datapath.scala 140:17]
    alu.io.a <= aVal @[Datapath.scala 141:12]
    alu.io.b <= UInt<1>("h00") @[Datapath.scala 142:12]
    node _T_197 = eq(bSelect, UInt<1>("h01")) @[Datapath.scala 143:16]
    when _T_197 : @[Datapath.scala 143:28]
      alu.io.b <= bVal @[Datapath.scala 144:14]
      skip @[Datapath.scala 143:28]
    else : @[Datapath.scala 146:14]
      alu.io.b <= immVal @[Datapath.scala 147:14]
      skip @[Datapath.scala 146:14]
    resultReg <= alu.io.out @[Datapath.scala 150:13]
    node _T_199 = eq(memSelectReg1, UInt<1>("h01")) @[Datapath.scala 152:22]
    when _T_199 : @[Datapath.scala 152:33]
      node _T_200 = bits(resultReg, 7, 0) @[Datapath.scala 153:27]
      node _T_202 = eq(isLoadReg1, UInt<1>("h01")) @[Datapath.scala 154:21]
      when _T_202 : @[Datapath.scala 154:32]
        dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 155:18]
        dMem.io.rdAddr <= _T_200 @[Datapath.scala 156:22]
        skip @[Datapath.scala 154:32]
      else : @[Datapath.scala 157:16]
        dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 158:18]
        dMem.io.wrAddr <= _T_200 @[Datapath.scala 159:22]
        dMem.io.wrData <= bVal @[Datapath.scala 160:22]
        skip @[Datapath.scala 157:16]
      skip @[Datapath.scala 152:33]
    else : @[Datapath.scala 162:14]
      dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 163:16]
      skip @[Datapath.scala 162:14]
    reg memSelect : UInt<1>, clock @[Datapath.scala 166:30]
    memSelect <= memSelectReg1 @[Datapath.scala 166:30]
    reg isLoad : UInt<1>, clock @[Datapath.scala 167:27]
    isLoad <= isLoadReg1 @[Datapath.scala 167:27]
    reg wbrReg2 : UInt, clock @[Datapath.scala 168:24]
    wbrReg2 <= wbrReg1 @[Datapath.scala 168:24]
    node _T_210 = eq(memSelect, UInt<1>("h01")) @[Datapath.scala 175:18]
    when _T_210 : @[Datapath.scala 175:30]
      node _T_212 = eq(isLoad, UInt<1>("h01")) @[Datapath.scala 176:17]
      when _T_212 : @[Datapath.scala 176:29]
        data <= dMem.io.rdData @[Datapath.scala 177:15]
        skip @[Datapath.scala 176:29]
      else : @[Datapath.scala 178:17]
        data <= UInt<32>("h00") @[Datapath.scala 179:15]
        skip @[Datapath.scala 178:17]
      skip @[Datapath.scala 175:30]
    else : @[Datapath.scala 181:15]
      data <= resultReg @[Datapath.scala 182:13]
      skip @[Datapath.scala 181:15]
    reg destination : UInt, clock @[Datapath.scala 185:24]
    destination <= wbrReg2 @[Datapath.scala 185:24]
    node _T_216 = neq(destination, UInt<4>("h00")) @[Datapath.scala 192:20]
    when _T_216 : @[Datapath.scala 192:34]
      node _T_221 = or(destination, UInt<4>("h00"))
      node _T_222 = bits(_T_221, 3, 0)
      rMem[_T_222] <= data @[Datapath.scala 193:23]
      skip @[Datapath.scala 192:34]
    io.inst <= instruction @[Datapath.scala 199:11]
    io.opcode <= opcode @[Datapath.scala 200:13]
    io.memSelect <= memSelectReg1 @[Datapath.scala 201:16]
    io.bSelect <= bSelect @[Datapath.scala 202:14]
    io.isLoad <= isLoadReg1 @[Datapath.scala 203:13]
    io.regA <= aVal @[Datapath.scala 204:11]
    io.regB <= bVal @[Datapath.scala 205:11]
    io.immediate <= immVal @[Datapath.scala 206:16]
    io.destReg <= wbrReg1 @[Datapath.scala 207:14]
    io.result <= resultReg @[Datapath.scala 208:13]
    reg prevWB : UInt, clock @[Datapath.scala 209:23]
    prevWB <= destination @[Datapath.scala 209:23]
    node _T_228 = or(prevWB, UInt<4>("h00"))
    node _T_229 = bits(_T_228, 3, 0)
    io.WBvalue <= rMem[_T_229] @[Datapath.scala 210:14]
    io.reg0 <= rMem[0] @[Datapath.scala 213:11]
    io.reg1 <= rMem[1] @[Datapath.scala 214:11]
    io.reg2 <= rMem[2] @[Datapath.scala 215:11]
    io.reg3 <= rMem[3] @[Datapath.scala 216:11]
    io.reg4 <= rMem[4] @[Datapath.scala 217:11]
    io.memData <= data @[Datapath.scala 220:14]
    
