;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Datapath : 
  module InstructionMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, rdData : UInt<32>}
    
    wire mem : UInt<32>[100] @[InstructionMemory.scala 12:17]
    mem[0] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[1] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[2] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[3] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[4] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[5] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[6] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[7] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[8] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[9] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[10] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[11] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[12] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[13] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[14] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[15] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[16] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[17] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[18] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[19] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[20] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[21] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[22] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[23] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[24] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[25] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[26] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[27] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[28] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[29] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[30] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[31] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[32] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[33] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[34] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[35] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[36] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[37] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[38] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[39] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[40] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[41] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[42] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[43] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[44] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[45] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[46] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[47] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[48] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[49] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[50] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[51] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[52] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[53] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[54] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[55] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[56] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[57] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[58] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[59] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[60] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[61] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[62] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[63] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[64] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[65] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[66] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[67] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[68] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[69] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[70] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[71] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[72] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[73] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[74] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[75] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[76] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[77] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[78] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[79] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[80] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[81] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[82] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[83] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[84] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[85] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[86] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[87] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[88] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[89] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[90] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[91] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[92] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[93] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[94] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[95] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[96] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[97] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[98] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    mem[99] <= UInt<32>("h00") @[InstructionMemory.scala 14:12]
    node _T_215 = bits(io.rdAddr, 6, 0)
    io.rdData <= mem[_T_215] @[InstructionMemory.scala 16:13]
    mem[0] <= UInt<20>("h0d0124") @[InstructionMemory.scala 20:10]
    mem[1] <= UInt<17>("h010224") @[InstructionMemory.scala 21:10]
    mem[2] <= UInt<1>("h00") @[InstructionMemory.scala 22:10]
    mem[3] <= UInt<1>("h00") @[InstructionMemory.scala 23:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 24:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 25:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 26:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 27:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 28:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 29:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 30:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 31:10]
    mem[4] <= UInt<17>("h010011") @[InstructionMemory.scala 32:10]
    mem[5] <= UInt<1>("h00") @[InstructionMemory.scala 33:10]
    mem[6] <= UInt<1>("h00") @[InstructionMemory.scala 34:10]
    mem[7] <= UInt<10>("h0310") @[InstructionMemory.scala 35:10]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, flip wrAddr : UInt<8>, flip wrData : UInt<32>, rdData : UInt<32>, flip wr : UInt<1>, led : UInt<1>}
    
    smem mem : UInt<32>[256] @[DataMemory.scala 17:24]
    reg regLed : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[DataMemory.scala 20:23]
    io.led <= regLed @[DataMemory.scala 21:10]
    node _T_22 = eq(io.wrAddr, UInt<1>("h00")) @[DataMemory.scala 23:19]
    node _T_23 = and(_T_22, io.wr) @[DataMemory.scala 23:27]
    when _T_23 : @[DataMemory.scala 23:36]
      regLed <= io.wrData @[DataMemory.scala 24:12]
      skip @[DataMemory.scala 23:36]
    read mport _T_24 = mem[io.rdAddr], clock @[DataMemory.scala 28:24]
    io.rdData <= _T_24 @[DataMemory.scala 28:13]
    when io.wr : @[DataMemory.scala 30:15]
      write mport _T_25 = mem[io.wrAddr], clock
      _T_25 <= io.wrData
      skip @[DataMemory.scala 30:15]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, flip opcode : UInt<5>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[ALU.scala 18:10]
    node _T_15 = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T_15 : @[Conditional.scala 40:58]
      io.out <= UInt<1>("h00") @[ALU.scala 21:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_18 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_18 : @[Conditional.scala 39:67]
        io.out <= io.a @[ALU.scala 22:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_20 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_20 : @[Conditional.scala 39:67]
          node _T_22 = add(io.a, UInt<1>("h01")) @[ALU.scala 23:30]
          node _T_23 = tail(_T_22, 1) @[ALU.scala 23:30]
          io.out <= _T_23 @[ALU.scala 23:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_25 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_25 : @[Conditional.scala 39:67]
            node _T_27 = sub(io.a, UInt<1>("h01")) @[ALU.scala 24:30]
            node _T_28 = asUInt(_T_27) @[ALU.scala 24:30]
            node _T_29 = tail(_T_28, 1) @[ALU.scala 24:30]
            io.out <= _T_29 @[ALU.scala 24:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_31 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_31 : @[Conditional.scala 39:67]
              node _T_32 = add(io.a, io.b) @[ALU.scala 25:30]
              node _T_33 = tail(_T_32, 1) @[ALU.scala 25:30]
              io.out <= _T_33 @[ALU.scala 25:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_35 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_35 : @[Conditional.scala 39:67]
                node _T_36 = sub(io.a, io.b) @[ALU.scala 26:30]
                node _T_37 = asUInt(_T_36) @[ALU.scala 26:30]
                node _T_38 = tail(_T_37, 1) @[ALU.scala 26:30]
                io.out <= _T_38 @[ALU.scala 26:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_40 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_40 : @[Conditional.scala 39:67]
                  node _T_41 = not(io.a) @[ALU.scala 27:25]
                  io.out <= _T_41 @[ALU.scala 27:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_43 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_43 : @[Conditional.scala 39:67]
                    node _T_44 = and(io.a, io.b) @[ALU.scala 28:29]
                    io.out <= _T_44 @[ALU.scala 28:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_46 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_46 : @[Conditional.scala 39:67]
                      node _T_47 = or(io.a, io.b) @[ALU.scala 29:29]
                      io.out <= _T_47 @[ALU.scala 29:21]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_49 = eq(UInt<4>("h09"), io.opcode) @[Conditional.scala 37:30]
                      when _T_49 : @[Conditional.scala 39:67]
                        node _T_50 = xor(io.a, io.b) @[ALU.scala 30:29]
                        io.out <= _T_50 @[ALU.scala 30:21]
                        skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {led : UInt<1>}
    
    inst iMem of InstructionMemory @[Datapath.scala 17:20]
    iMem.clock <= clock
    iMem.reset <= reset
    inst dMem of DataMemory @[Datapath.scala 21:20]
    dMem.clock <= clock
    dMem.reset <= reset
    dMem.io.wrAddr <= UInt<1>("h00") @[Datapath.scala 22:18]
    dMem.io.wrData <= UInt<1>("h00") @[Datapath.scala 23:18]
    dMem.io.rdAddr <= UInt<1>("h00") @[Datapath.scala 24:18]
    dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 25:14]
    io.led <= dMem.io.led @[Datapath.scala 26:10]
    wire _T_24 : UInt<32>[10] @[Datapath.scala 29:30]
    _T_24[0] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[1] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[2] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[3] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[4] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[5] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[6] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[7] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[8] <= UInt<32>("h00") @[Datapath.scala 29:30]
    _T_24[9] <= UInt<32>("h00") @[Datapath.scala 29:30]
    reg rMem : UInt<32>[10], clock with : (reset => (reset, _T_24)) @[Datapath.scala 29:22]
    inst alu of ALU @[Datapath.scala 32:19]
    alu.clock <= clock
    alu.reset <= reset
    reg instruction : UInt<32>, clock @[Datapath.scala 37:27]
    reg opcode : UInt<4>, clock @[Datapath.scala 40:22]
    reg memSelectReg1 : UInt<1>, clock @[Datapath.scala 41:26]
    reg bSelect : UInt<1>, clock @[Datapath.scala 42:23]
    reg isLoadReg1 : UInt<1>, clock @[Datapath.scala 43:23]
    reg aVal : UInt<32>, clock @[Datapath.scala 44:20]
    reg bVal : UInt<32>, clock @[Datapath.scala 45:21]
    reg immVal : UInt<32>, clock @[Datapath.scala 46:22]
    reg wbrReg1 : UInt<4>, clock @[Datapath.scala 47:20]
    reg resultReg : UInt<32>, clock @[Datapath.scala 50:22]
    reg data : UInt<32>, clock @[Datapath.scala 53:20]
    reg pc : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Datapath.scala 58:19]
    node _T_109 = add(pc, UInt<8>("h01")) @[Datapath.scala 59:12]
    node _T_110 = tail(_T_109, 1) @[Datapath.scala 59:12]
    pc <= _T_110 @[Datapath.scala 59:6]
    iMem.io.rdAddr <= pc @[Datapath.scala 61:18]
    instruction <= iMem.io.rdData @[Datapath.scala 62:18]
    node _T_111 = bits(instruction, 4, 4) @[Datapath.scala 68:31]
    memSelectReg1 <= _T_111 @[Datapath.scala 68:17]
    node _T_112 = bits(instruction, 0, 0) @[Datapath.scala 69:29]
    node _T_113 = not(_T_112) @[Datapath.scala 69:17]
    isLoadReg1 <= _T_113 @[Datapath.scala 69:14]
    node _T_114 = bits(instruction, 15, 12) @[Datapath.scala 70:30]
    aVal <= rMem[_T_114] @[Datapath.scala 70:11]
    node _T_118 = bits(instruction, 4, 4) @[Datapath.scala 72:19]
    node _T_120 = eq(_T_118, UInt<1>("h00")) @[Datapath.scala 72:23]
    when _T_120 : @[Datapath.scala 72:37]
      node _T_121 = bits(instruction, 3, 0) @[Datapath.scala 73:29]
      opcode <= _T_121 @[Datapath.scala 73:15]
      node _T_122 = bits(instruction, 11, 8) @[Datapath.scala 74:27]
      wbrReg1 <= _T_122 @[Datapath.scala 74:13]
      node _T_123 = bits(instruction, 7, 5) @[Datapath.scala 76:23]
      node _T_125 = eq(UInt<1>("h00"), _T_123) @[Conditional.scala 37:30]
      when _T_125 : @[Conditional.scala 40:58]
        node _T_126 = bits(instruction, 19, 16) @[Datapath.scala 79:37]
        bVal <= rMem[_T_126] @[Datapath.scala 79:18]
        immVal <= UInt<32>("h00") @[Datapath.scala 80:19]
        bSelect <= UInt<1>("h01") @[Datapath.scala 81:20]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_133 = eq(UInt<1>("h01"), _T_123) @[Conditional.scala 37:30]
        when _T_133 : @[Conditional.scala 39:67]
          bVal <= UInt<32>("h00") @[Datapath.scala 85:18]
          node _T_136 = bits(instruction, 31, 16) @[Datapath.scala 86:48]
          node _T_137 = cat(UInt<16>("h00"), _T_136) @[Cat.scala 30:58]
          immVal <= _T_137 @[Datapath.scala 86:19]
          bSelect <= UInt<1>("h00") @[Datapath.scala 87:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_140 = eq(UInt<2>("h02"), _T_123) @[Conditional.scala 37:30]
          when _T_140 : @[Conditional.scala 39:67]
            bVal <= UInt<32>("h00") @[Datapath.scala 91:18]
            immVal <= UInt<32>("h00") @[Datapath.scala 92:19]
            bSelect <= UInt<1>("h00") @[Datapath.scala 93:20]
            skip @[Conditional.scala 39:67]
      skip @[Datapath.scala 72:37]
    else : @[Datapath.scala 96:15]
      opcode <= UInt<4>("h04") @[Datapath.scala 97:15]
      node _T_146 = bits(instruction, 27, 20) @[Datapath.scala 98:44]
      node _T_147 = cat(UInt<24>("h00"), _T_146) @[Cat.scala 30:58]
      immVal <= _T_147 @[Datapath.scala 98:15]
      bSelect <= UInt<1>("h00") @[Datapath.scala 99:16]
      node _T_149 = bits(instruction, 0, 0) @[Datapath.scala 101:21]
      node _T_151 = eq(_T_149, UInt<1>("h00")) @[Datapath.scala 101:25]
      when _T_151 : @[Datapath.scala 101:39]
        node _T_152 = bits(instruction, 11, 8) @[Datapath.scala 102:29]
        wbrReg1 <= _T_152 @[Datapath.scala 102:15]
        bVal <= UInt<32>("h00") @[Datapath.scala 103:16]
        skip @[Datapath.scala 101:39]
      else : @[Datapath.scala 105:17]
        wbrReg1 <= UInt<4>("h00") @[Datapath.scala 106:15]
        node _T_155 = bits(instruction, 19, 16) @[Datapath.scala 107:35]
        bVal <= rMem[_T_155] @[Datapath.scala 107:16]
        skip @[Datapath.scala 105:17]
      skip @[Datapath.scala 96:15]
    alu.io.opcode <= opcode @[Datapath.scala 119:17]
    alu.io.a <= aVal @[Datapath.scala 120:12]
    alu.io.b <= UInt<1>("h00") @[Datapath.scala 121:12]
    node _T_161 = eq(bSelect, UInt<1>("h01")) @[Datapath.scala 122:16]
    when _T_161 : @[Datapath.scala 122:28]
      alu.io.b <= bVal @[Datapath.scala 123:14]
      skip @[Datapath.scala 122:28]
    else : @[Datapath.scala 125:14]
      alu.io.b <= immVal @[Datapath.scala 126:14]
      skip @[Datapath.scala 125:14]
    resultReg <= alu.io.out @[Datapath.scala 129:13]
    node _T_163 = eq(memSelectReg1, UInt<1>("h01")) @[Datapath.scala 131:22]
    when _T_163 : @[Datapath.scala 131:33]
      node _T_164 = bits(resultReg, 7, 0) @[Datapath.scala 132:27]
      node _T_166 = eq(isLoadReg1, UInt<1>("h01")) @[Datapath.scala 133:21]
      when _T_166 : @[Datapath.scala 133:32]
        dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 134:18]
        dMem.io.rdAddr <= _T_164 @[Datapath.scala 135:22]
        skip @[Datapath.scala 133:32]
      else : @[Datapath.scala 136:16]
        dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 137:18]
        dMem.io.wrAddr <= _T_164 @[Datapath.scala 138:22]
        dMem.io.wrData <= bVal @[Datapath.scala 139:22]
        skip @[Datapath.scala 136:16]
      skip @[Datapath.scala 131:33]
    else : @[Datapath.scala 141:14]
      dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 142:16]
      skip @[Datapath.scala 141:14]
    reg memSelect : UInt<1>, clock @[Datapath.scala 145:30]
    memSelect <= memSelectReg1 @[Datapath.scala 145:30]
    reg isLoad : UInt<1>, clock @[Datapath.scala 146:27]
    isLoad <= isLoadReg1 @[Datapath.scala 146:27]
    reg wbrReg2 : UInt, clock @[Datapath.scala 147:24]
    wbrReg2 <= wbrReg1 @[Datapath.scala 147:24]
    node _T_174 = eq(memSelect, UInt<1>("h01")) @[Datapath.scala 154:18]
    when _T_174 : @[Datapath.scala 154:30]
      node _T_176 = eq(isLoad, UInt<1>("h01")) @[Datapath.scala 155:17]
      when _T_176 : @[Datapath.scala 155:29]
        data <= dMem.io.rdData @[Datapath.scala 156:15]
        skip @[Datapath.scala 155:29]
      else : @[Datapath.scala 157:17]
        data <= UInt<32>("h00") @[Datapath.scala 158:15]
        skip @[Datapath.scala 157:17]
      skip @[Datapath.scala 154:30]
    else : @[Datapath.scala 160:15]
      data <= resultReg @[Datapath.scala 161:13]
      skip @[Datapath.scala 160:15]
    reg destination : UInt, clock @[Datapath.scala 164:24]
    destination <= wbrReg2 @[Datapath.scala 164:24]
    node _T_180 = neq(destination, UInt<4>("h00")) @[Datapath.scala 171:20]
    when _T_180 : @[Datapath.scala 171:34]
      node _T_185 = or(destination, UInt<4>("h00"))
      node _T_186 = bits(_T_185, 3, 0)
      rMem[_T_186] <= data @[Datapath.scala 172:23]
      skip @[Datapath.scala 171:34]
    
