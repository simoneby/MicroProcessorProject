;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Datapath : 
  module InstructionMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, rdData : UInt<32>}
    
    smem mem : UInt<32>[256] @[InstructionMemory.scala 13:24]
    infer mport _T_11 = mem[io.rdAddr], clock @[InstructionMemory.scala 15:19]
    io.rdData <= _T_11 @[InstructionMemory.scala 15:13]
    write mport _T_14 = mem[UInt<8>("h00")], clock
    _T_14 <= UInt<29>("h019100005")
    write mport _T_17 = mem[UInt<8>("h04")], clock
    _T_17 <= UInt<29>("h019210007")
    write mport _T_20 = mem[UInt<8>("h08")], clock
    _T_20 <= UInt<30>("h020321000")
    write mport _T_23 = mem[UInt<8>("h0c")], clock
    _T_23 <= UInt<32>("h088013000")
    write mport _T_26 = mem[UInt<8>("h010")], clock
    _T_26 <= UInt<32>("h088013000")
    write mport _T_29 = mem[UInt<8>("h014")], clock
    _T_29 <= UInt<32>("h080410000")
    write mport _T_32 = mem[UInt<8>("h018")], clock
    _T_32 <= UInt<28>("h0a440000")
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<8>, flip wrAddr : UInt<8>, flip wrData : UInt<8>, rdData : UInt<32>, flip rd : UInt<1>, flip wr : UInt<1>}
    
    smem mem : UInt<32>[256] @[DataMemory.scala 17:24]
    io.rdData <= UInt<32>("h00") @[DataMemory.scala 19:13]
    when io.rd : @[DataMemory.scala 21:15]
      infer mport _T_20 = mem[io.rdAddr], clock @[DataMemory.scala 22:21]
      io.rdData <= _T_20 @[DataMemory.scala 22:15]
      skip @[DataMemory.scala 21:15]
    when io.wr : @[DataMemory.scala 25:15]
      infer mport _T_21 = mem[io.wrAddr], clock @[DataMemory.scala 26:8]
      _T_21 <= io.wrData @[DataMemory.scala 26:20]
      skip @[DataMemory.scala 25:15]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, flip opcode : UInt<5>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[ALU.scala 18:10]
    node _T_15 = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T_15 : @[Conditional.scala 40:58]
      io.out <= io.a @[ALU.scala 21:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_17 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_17 : @[Conditional.scala 39:67]
        node _T_19 = add(io.a, UInt<1>("h01")) @[ALU.scala 22:30]
        node _T_20 = tail(_T_19, 1) @[ALU.scala 22:30]
        io.out <= _T_20 @[ALU.scala 22:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_22 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_22 : @[Conditional.scala 39:67]
          node _T_24 = sub(io.a, UInt<1>("h01")) @[ALU.scala 23:30]
          node _T_25 = asUInt(_T_24) @[ALU.scala 23:30]
          node _T_26 = tail(_T_25, 1) @[ALU.scala 23:30]
          io.out <= _T_26 @[ALU.scala 23:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_28 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_28 : @[Conditional.scala 39:67]
            node _T_29 = add(io.a, io.b) @[ALU.scala 24:30]
            node _T_30 = tail(_T_29, 1) @[ALU.scala 24:30]
            io.out <= _T_30 @[ALU.scala 24:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_32 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_32 : @[Conditional.scala 39:67]
              node _T_33 = sub(io.a, io.b) @[ALU.scala 25:30]
              node _T_34 = asUInt(_T_33) @[ALU.scala 25:30]
              node _T_35 = tail(_T_34, 1) @[ALU.scala 25:30]
              io.out <= _T_35 @[ALU.scala 25:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_37 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_37 : @[Conditional.scala 39:67]
                node _T_38 = not(io.a) @[ALU.scala 26:25]
                io.out <= _T_38 @[ALU.scala 26:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_40 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_40 : @[Conditional.scala 39:67]
                  node _T_41 = and(io.a, io.b) @[ALU.scala 27:29]
                  io.out <= _T_41 @[ALU.scala 27:21]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_43 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_43 : @[Conditional.scala 39:67]
                    node _T_44 = or(io.a, io.b) @[ALU.scala 28:29]
                    io.out <= _T_44 @[ALU.scala 28:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_46 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_46 : @[Conditional.scala 39:67]
                      node _T_47 = xor(io.a, io.b) @[ALU.scala 29:29]
                      io.out <= _T_47 @[ALU.scala 29:21]
                      skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, opcode : UInt<5>, select : UInt<3>, regA : UInt<4>, regB : UInt<4>, immediate : UInt<16>, destReg : UInt<4>, regAvalue : UInt<32>, result : UInt<32>}
    
    reg instructionReg : UInt<32>, clock @[Datapath.scala 33:27]
    reg opcode : UInt<4>, clock @[Datapath.scala 36:22]
    reg memSelectReg1 : UInt<1>, clock @[Datapath.scala 37:26]
    reg bSelect : UInt<1>, clock @[Datapath.scala 38:23]
    reg isLoadReg1 : UInt<1>, clock @[Datapath.scala 39:23]
    reg aVal : UInt<32>, clock @[Datapath.scala 40:20]
    reg bVal : UInt<32>, clock @[Datapath.scala 41:21]
    reg immVal : UInt<32>, clock @[Datapath.scala 42:22]
    reg wbrReg1 : UInt<4>, clock @[Datapath.scala 43:20]
    reg result : UInt<32>, clock @[Datapath.scala 46:22]
    reg data : UInt<32>, clock @[Datapath.scala 49:20]
    inst iMem of InstructionMemory @[Datapath.scala 54:20]
    iMem.clock <= clock
    iMem.reset <= reset
    inst dMem of DataMemory @[Datapath.scala 58:20]
    dMem.clock <= clock
    dMem.reset <= reset
    reg rMem : UInt<32>[10], clock @[Datapath.scala 62:17]
    inst alu of ALU @[Datapath.scala 65:19]
    alu.clock <= clock
    alu.reset <= reset
    reg pc : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Datapath.scala 70:19]
    node _T_52 = add(pc, UInt<8>("h04")) @[Datapath.scala 71:12]
    node _T_53 = tail(_T_52, 1) @[Datapath.scala 71:12]
    pc <= _T_53 @[Datapath.scala 71:6]
    iMem.io.rdAddr <= pc @[Datapath.scala 73:18]
    instructionReg <= iMem.io.rdData @[Datapath.scala 74:18]
    node _T_54 = bits(io.inst, 4, 1) @[Datapath.scala 82:27]
    opcode <= _T_54 @[Datapath.scala 82:13]
    node _T_55 = bits(io.inst, 0, 0) @[Datapath.scala 83:31]
    memSelectReg1 <= _T_55 @[Datapath.scala 83:17]
    node _T_56 = bits(io.inst, 4, 4) @[Datapath.scala 84:29]
    node _T_57 = not(_T_56) @[Datapath.scala 84:17]
    isLoadReg1 <= _T_57 @[Datapath.scala 84:14]
    node _T_58 = bits(io.inst, 15, 12) @[Datapath.scala 85:30]
    aVal <= rMem[_T_58] @[Datapath.scala 85:11]
    node _T_60 = bits(io.inst, 4, 1) @[Datapath.scala 89:113]
    io.opcode <= _T_60 @[Datapath.scala 89:99]
    node _T_61 = bits(io.inst, 15, 12) @[Datapath.scala 90:111]
    io.regA <= _T_61 @[Datapath.scala 90:97]
    io.regB <= UInt<4>("h00") @[Datapath.scala 91:97]
    io.immediate <= UInt<16>("h00") @[Datapath.scala 92:102]
    node _T_64 = bits(io.inst, 7, 5) @[Datapath.scala 93:113]
    io.select <= _T_64 @[Datapath.scala 93:99]
    node _T_65 = bits(io.inst, 11, 8) @[Datapath.scala 94:114]
    io.destReg <= _T_65 @[Datapath.scala 94:100]
    io.regAvalue <= aVal @[Datapath.scala 96:102]
    node _T_67 = eq(memSelectReg1, UInt<1>("h00")) @[Datapath.scala 99:22]
    when _T_67 : @[Datapath.scala 99:31]
      node _T_68 = bits(io.inst, 11, 8) @[Datapath.scala 100:27]
      wbrReg1 <= _T_68 @[Datapath.scala 100:13]
      node _T_69 = bits(io.inst, 7, 5) @[Datapath.scala 102:23]
      node _T_71 = eq(UInt<1>("h00"), _T_69) @[Conditional.scala 37:30]
      when _T_71 : @[Conditional.scala 40:58]
        node _T_72 = bits(io.inst, 19, 16) @[Datapath.scala 105:37]
        bVal <= rMem[_T_72] @[Datapath.scala 105:18]
        immVal <= UInt<32>("h00") @[Datapath.scala 106:19]
        bSelect <= UInt<1>("h01") @[Datapath.scala 107:20]
        node _T_76 = bits(io.inst, 19, 16) @[Datapath.scala 108:31]
        io.regB <= _T_76 @[Datapath.scala 108:17]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_78 = eq(UInt<1>("h01"), _T_69) @[Conditional.scala 37:30]
        when _T_78 : @[Conditional.scala 39:67]
          bVal <= UInt<32>("h00") @[Datapath.scala 112:18]
          node _T_81 = bits(io.inst, 31, 16) @[Datapath.scala 113:48]
          node _T_82 = cat(UInt<16>("h00"), _T_81) @[Cat.scala 30:58]
          immVal <= _T_82 @[Datapath.scala 113:19]
          bSelect <= UInt<1>("h00") @[Datapath.scala 114:20]
          io.immediate <= immVal @[Datapath.scala 115:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_85 = eq(UInt<2>("h02"), _T_69) @[Conditional.scala 37:30]
          when _T_85 : @[Conditional.scala 39:67]
            bVal <= UInt<32>("h00") @[Datapath.scala 119:18]
            immVal <= UInt<32>("h00") @[Datapath.scala 120:19]
            bSelect <= UInt<1>("h00") @[Datapath.scala 121:20]
            skip @[Conditional.scala 39:67]
      skip @[Datapath.scala 99:31]
    else : @[Datapath.scala 124:15]
      node _T_90 = bits(io.inst, 27, 20) @[Datapath.scala 125:44]
      node _T_91 = cat(UInt<24>("h00"), _T_90) @[Cat.scala 30:58]
      immVal <= _T_91 @[Datapath.scala 125:15]
      bSelect <= UInt<1>("h00") @[Datapath.scala 126:16]
      when isLoadReg1 : @[Datapath.scala 128:22]
        node _T_93 = bits(io.inst, 11, 8) @[Datapath.scala 129:29]
        wbrReg1 <= _T_93 @[Datapath.scala 129:15]
        bVal <= UInt<32>("h00") @[Datapath.scala 130:16]
        skip @[Datapath.scala 128:22]
      else : @[Datapath.scala 132:17]
        wbrReg1 <= UInt<4>("h00") @[Datapath.scala 133:15]
        node _T_96 = bits(io.inst, 19, 16) @[Datapath.scala 134:35]
        bVal <= rMem[_T_96] @[Datapath.scala 134:16]
        skip @[Datapath.scala 132:17]
      skip @[Datapath.scala 124:15]
    alu.io.opcode <= opcode @[Datapath.scala 145:17]
    alu.io.a <= aVal @[Datapath.scala 146:12]
    alu.io.b <= UInt<1>("h00") @[Datapath.scala 147:12]
    node _T_100 = eq(bSelect, UInt<1>("h01")) @[Datapath.scala 148:16]
    when _T_100 : @[Datapath.scala 148:28]
      alu.io.b <= bVal @[Datapath.scala 149:14]
      skip @[Datapath.scala 148:28]
    else : @[Datapath.scala 151:14]
      alu.io.b <= immVal @[Datapath.scala 152:12]
      skip @[Datapath.scala 151:14]
    result <= alu.io.out @[Datapath.scala 155:13]
    io.result <= result @[Datapath.scala 156:13]
    reg memSelect : UInt<1>, clock @[Datapath.scala 158:30]
    memSelect <= memSelectReg1 @[Datapath.scala 158:30]
    reg isLoad : UInt<1>, clock @[Datapath.scala 159:27]
    isLoad <= isLoadReg1 @[Datapath.scala 159:27]
    reg bValReg2 : UInt, clock @[Datapath.scala 160:25]
    bValReg2 <= bVal @[Datapath.scala 160:25]
    reg wbrReg2 : UInt, clock @[Datapath.scala 161:24]
    wbrReg2 <= wbrReg1 @[Datapath.scala 161:24]
    when memSelect : @[Datapath.scala 170:19]
      when isLoad : @[Datapath.scala 171:18]
        dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 172:18]
        dMem.io.rd <= UInt<1>("h01") @[Datapath.scala 173:18]
        dMem.io.rdAddr <= result @[Datapath.scala 174:22]
        dMem.io.wrAddr <= UInt<8>("h00") @[Datapath.scala 175:22]
        dMem.io.wrData <= UInt<32>("h00") @[Datapath.scala 176:22]
        data <= dMem.io.rdData @[Datapath.scala 177:15]
        skip @[Datapath.scala 171:18]
      else : @[Datapath.scala 178:7]
        dMem.io.wr <= UInt<1>("h01") @[Datapath.scala 179:18]
        dMem.io.rd <= UInt<1>("h00") @[Datapath.scala 180:18]
        dMem.io.rdAddr <= UInt<8>("h00") @[Datapath.scala 181:22]
        dMem.io.wrAddr <= result @[Datapath.scala 182:22]
        dMem.io.wrData <= bValReg2 @[Datapath.scala 183:22]
        data <= UInt<32>("h00") @[Datapath.scala 184:15]
        skip @[Datapath.scala 178:7]
      skip @[Datapath.scala 170:19]
    else : @[Datapath.scala 186:5]
      dMem.io.rd <= UInt<1>("h00") @[Datapath.scala 187:16]
      dMem.io.wr <= UInt<1>("h00") @[Datapath.scala 188:16]
      dMem.io.rdAddr <= UInt<8>("h00") @[Datapath.scala 189:20]
      dMem.io.wrAddr <= UInt<8>("h00") @[Datapath.scala 190:20]
      dMem.io.wrData <= UInt<32>("h00") @[Datapath.scala 191:20]
      data <= result @[Datapath.scala 192:13]
      skip @[Datapath.scala 186:5]
    reg destination : UInt, clock @[Datapath.scala 196:24]
    destination <= wbrReg2 @[Datapath.scala 196:24]
    node _T_120 = neq(destination, UInt<4>("h00")) @[Datapath.scala 203:20]
    when _T_120 : @[Datapath.scala 203:34]
      node _T_123 = or(destination, UInt<4>("h00"))
      node _T_124 = bits(_T_123, 3, 0)
      rMem[_T_124] <= data @[Datapath.scala 204:23]
      skip @[Datapath.scala 203:34]
    
